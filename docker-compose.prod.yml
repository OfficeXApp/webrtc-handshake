# docker-compose.prod.yml
# For Production Deployment with Traefik for Automatic SSL

version: "3.8"

services:
  # Your Node.js Application
  app:
    build: . # Builds the image from your local Dockerfile
    restart: unless-stopped
    # Expose the port your app listens on inside the container.
    # This should match the PORT environment variable in your .env and Dockerfile.
    expose:
      - "${PORT:-4444}"
    env_file:
      - ./.env
    # If your app needs to persist any data (e.g., logs, user uploads)
    # to a host volume, you can add a volume here.
    # For a simple server.js, you might not need this.
    # volumes:
    #   - app_data:/data

    # Traefik Labels for your application service
    labels:
      - "traefik.enable=true"
      # Secure router for HTTPS traffic
      - "traefik.http.routers.my-app.rule=Host(`${SERVER_DOMAIN}`)"
      - "traefik.http.routers.my-app.entrypoints=websecure"
      - "traefik.http.routers.my-app.tls.certresolver=myresolver"
      # IMPORTANT: Ensure this port matches your Dockerfile's PORT and .env's PORT
      - "traefik.http.services.my-app.loadbalancer.server.port=${PORT:-4444}"

    healthcheck:
      # IMPORTANT: Adjust healthcheck URL to match your app's health endpoint and port.
      # If you don't have a /health endpoint, you might just check the root path:
      # test: ["CMD", "curl", "-f", "http://localhost:${PORT:-4444}"]
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-4444}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  traefik:
    image: traefik:v2.10
    container_name: traefik-vendor
    restart: unless-stopped
    ports:
      - "80:80" # Expose HTTP port for redirection
      - "443:443" # Expose HTTPS port for secure traffic
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Let's Encrypt configuration
      - --certificatesresolvers.myresolver.acme.tlschallenge=true # Use TLS-ALPN-01 challenge
      - --certificatesresolvers.myresolver.acme.email=${LE_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      # Global HTTP to HTTPS redirection for the 'web' entrypoint
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      # Logging
      - --log.level=INFO
      - --accesslog=true
      # Optional: Enable Traefik Dashboard (for debugging/monitoring, remove in strict production)
      # - --api.dashboard=true
      # - --api.insecure=true # WARNING: Do not use in production without proper authentication
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Allows Traefik to discover Docker services
      - letsencrypt_certs:/letsencrypt # Persist Let's Encrypt certificates
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 10s
    depends_on:
      app:
        condition: service_healthy # Traefik waits for the app to be healthy

volumes:
  # app_data: # Uncomment and use if your app needs persistent storage
  #   driver: local
  letsencrypt_certs:
    driver: local
